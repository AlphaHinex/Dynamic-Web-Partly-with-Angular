apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'war'
apply plugin: 'com.bmuschko.tomcat'

sourceCompatibility = 1.7
targetCompatibility = 1.7
archivesBaseName = 'dynamic-web-partly-with-angular-seed'
webAppDirName = 'WebContent'

sourceSets {
    main {
        java.srcDir 'src'
        output.classesDir = 'WebContent/WEB-INF/classes'
    }
    test {
        java.srcDir 'test'
    }
}

eclipse.classpath.file {
    whenMerged { classpath ->
        classpath.entries.find { entry -> entry.kind == 'output'}*.path = 'WebContent/WEB-INF/classes'
    }
}

// retrieve gradle-tomcat-plugin from Bintray
buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-tomcat-plugin:2.0'
    }
}

tomcat.httpPort = 9090
tomcatRun.contextPath = 'now'

repositories {
    flatDir {
        dirs 'WebContent/WEB-INF/lib'
    }
}

dependencies {
    // gradle-tomcat-plugin
    def tomcatVersion = '6.0.41'
    tomcat "org.apache.tomcat:catalina:${tomcatVersion}",
           "org.apache.tomcat:coyote:${tomcatVersion}",
           "org.apache.tomcat:jasper:${tomcatVersion}"

    def spring4Ver = '4.1.3.RELEASE'
    def springSecurityVer = '3.2.0.RELEASE'
    def slf4jVer = '1.6.6'

    // Spring
    compile("org.springframework:spring-context:${spring4Ver}") {
        exclude group: 'commons-logging'
    }
    compile "org.springframework:spring-webmvc:${spring4Ver}"
    runtime "org.springframework.security:spring-security-web:${springSecurityVer}"

    // Logging
    runtime "org.slf4j:slf4j-log4j12:${slf4jVer}"

}

//copying all dependencies attached into a specific folder
task copyDeps(type: Copy) {
    from configurations.compile
    from configurations.runtime
    into 'WebContent/WEB-INF/lib'
}

task forEclipse(dependsOn: [cleanEclipse, 'eclipse', copyDeps]) {}

war {
    exclude 'ngapp'
    exclude 'ngapp-build'
    from('WebContent/ngapp-build') {
        into 'ngapp'
    }
}

task buildStatic() << {
    // on windows:
    println "cmd /C grunt build:static".execute().text

    // on linux:
    //println "grunt build:static".execute().text
}

task getWar(dependsOn: [clean, buildStatic, war]) {}